//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block title
  title Test Your Way to a Better Sleep
  meta(
    name="description"
    content="Getting started testing your React components with Enzyme"
  )
  meta(
    name="author"
    content="Jared Schaab"
  )

  block theme
      link(rel="stylesheet" href="css/theme/solarized.css" id="theme")
//- Add your slides here. See templates/includes/_mixins.jade for information 
//- on how `+slide` works.
block slides
    - var author = 'Jared Schaab';
    - var authorEmail = 'jared.schaab@gmail.com';
    - var twitterHandle = 'JaredSchaab';
    - var githubHandle = 'schaab';

    +slide(data-background="http://i.giphy.com/lUN33MuYWsXXa.gif")
        h1 Test Your Way to a Better Sleep

        p Unit test your react components
            br
            | and take a step out of the Javascript Wild West


        p by #[a(href=authorLink)= author]
            br
            small
                a(href="https://twitter.com/" + twitterHandle)= '@' + twitterHandle
                |  |&nbsp;
                a(href="mailto:" + authorEmail)= authorEmail

    +slide
        h1 Why Unit Test?

        ul
            li.fragment Documentation for new developers
            li.fragment Degree of confidence that functionality is correct
            li.fragment Baseline functionality for when refactoring
            li.fragment
                a(href="http://evidencebasedse.com/?q=node/78")= "Reduce number of bugs"
            li.fragment Validate bugs are fixed
                span.fragment &hellip;and not broken again later

        aside.notes Shouldn&#8217;t have to really do this one but it almost feels necessary

    +slide
        h1 Characteristics of a Good Unit Test

        aside.notes Readable, Trustworthy, Maintainable

    +slide
        h2 Readable

        aside.notes tests a singular thing and is explicit. No outside dependencies.

    +slide
        pre
            code(data-trim contenteditable class="javascript").
                describe('add()', () => {
                    it('should add stuffs', () => {
                        expect(add(1, 2)).toEqual(3);
                        expect(add(0, 0)).toEqual(0);
                        expect(add(-1, 2)).toEqual(1);
                        expect(add(-1, -2)).toEqual(-3);
                        expect(add(1, 2, 5)).toEqual(3);

                    });
                });

        pre.fragment.fade-in
            code(data-trim contenteditable class="javascript").
                describe('add()', () => {
                    it('should add two positive numbers', () => {
                        expect(add(1, 2)).toEqual(3);
                    });

                    it('should add zeros', () => {
                        expect(add(0, 0)).toEqual(0);
                    });

                    it('should add a negative and a positive value', () => {
                        expect(add(-1, 2)).toEqual(1);
                        expect(add(1, -2)).toEqual(-1);
                    });
                });

    +slide
        h2 Trustworthy

        aside.notes

    +slide
        pre
            code(data-trim contenteditable class="javascript").
                describe('add()', () => {
                    it('should add two positive numbers', () => {
                        expect(3).toEqual(3);
                    });
                });

    +slide
        h2 Maintainable

        aside.notes
            ul
                li Good unit tests are concise
                li Large amounts of mocking/setup are usually code smells
                li The cool thing is these are all things we want to accomplish when designing our react components

    +slide
        h2 Suggested Structure

        pre
            code(data-trim contenteditable).
                actions/
                    CommandActions.js
                    CommandActions.spec.js
                    UserActions.js
                    UserActions.spec.js
                    ...
                components/
                    Header.js
                    Header.spec.js
                    Sidebar.js
                    Sidebar.spec.js
                    ...
                containers/
                    App.js
                    App.spec.js
                    Command.js
                    Command.spec.js
                    ...
                reducers/
                    index.js
                    index.spec.js
                    command.js
                    command.spec.js
                    ...

        aside.notes Place test files right next to the file in test. Makes finding tests easy.

    +slide
        h2 AWESOME!!

        p.fragment.fade-in So now what?

    +slide(data-background="http://i.giphy.com/11rIergnpiYpvW.gif")
        h2 Let&apos;s Try it Out

        p
            a(href="https://github.com/schaab/github-widget")= 'Github Widget'

    +slide
        h2 Install Dependencies

        aside.notes
            ul
                li Mocha
                li Chai
                li Enzyme
                li Babel
                li Sinon

    +slide(data-background="https://cldup.com/xFVFxOioAU.svg")

        aside.notes Can use any testing framework you want, choose Mocha because of familiarity

    +slide(data-background="https://avatars2.githubusercontent.com/u/1515293?v=3&s=800")

        aside.notes Can use any assertion library you want

    +slide
        h2 Enzyme

        p More info at the&nbsp;
            a(href="https://github.com/airbnb/enzyme")= 'Enzyme github repo'

        aside.notes
            ul
                li Solves 3 three challenges (isolation, lifecycle, html)
                li familiar jQuery type selectors
                li Why not jest? Not entirely a fan of auto-mocking

    +slide
        h2 shallow

        pre.fragment
            code.javascript(data-trim contenteditable).
                import { shallow } from 'enzyme';

                it('should have some things', () => {
                    const wrapper = shallow(&lt;WickedAwesomeComponent &#47;&gt;);
                    expect(wrapper.find('.class')).to.have.length(3);
                });

        aside.notes
            ul
                li Test component in isolation.
                li No access to lifecycle events.
                li Returns `ShallowWrapper` which allows you to query the rendered output

    +slide
        h2 mount

        pre.fragment
            code.javascript(data-trim contenteditable).
                import { mount } from 'enzyme';

                it('calls componentDidMount', () => {
                    spy(WickedAwesomeComponent.prototype, 'componentDidMount');
                    const wrapper = mount(&lt;WickedAwesomeComponent &#47;&gt;);
                    expect(WickedAwesomeComponent.prototype.componentDidMount.calledOnce).to.equal(true);
                });

        aside.notes
            ul
                li Ideal for testing lifecycle events
                li Must be run in a browser like environment
                li Suggested to use jsdom, which is effectively a headless browser
                li Can do many of the same queries as `shallow`

    +slide
        h2 render

        pre.fragment
            code.javascript(data-trim contenteditable).
                import { render } from 'enzyme';

                it('has words', () => {
                    // assuming the WickedAwesomeComponent renders &lt;div&gt;{ words }&lt;div&#47;&gt;
                    var wrapper = render(&ltWickedAwesomeComponent words="some words here" &#47;&gt;);
                    expect(wrapper.text()).to.contain('some words here');
                });

        aside.notes
            ul
                li Used to render react components to static HTML
                li Validate the produced HTML
                li Uses a 3rd party HTML parsing library `Cheerio`

    +slide
        h2 Babel

        pre.fragment
            code.javascript(data-trim contenteditable).
                import { shallow } from 'enzyme';

                // note ES2015 arrow function and JSX
                // not currently supported with node
                it('should have some things', () => {
                    const wrapper = shallow(&lt;WickedAwesomeComponent &#47;&gt;);
                    expect(wrapper.find('.class')).to.have.length(3);
                });

        aside.notes Used to transpile tests

    +slide
        h2 Sinon

    +slide
        h2 Other Things to Consider

        ul
            li Git pre-commit hooks
            li Code Coverage

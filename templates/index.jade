//- Use the presentation layout so we can keep this clean
extends layouts/presentation

//- Customize the title, meta description, and author using this block.
block title
  title Test Your Way to a Better Sleep
  meta(
    name="description"
    content="Getting started testing your React components with Enzyme"
  )
  meta(
    name="author"
    content="Jared Schaab"
  )

  block theme
      link(rel="stylesheet" href="css/theme/solarized.css" id="theme")
//- Add your slides here. See templates/includes/_mixins.jade for information 
//- on how `+slide` works.
block slides
    - var author = 'Jared Schaab';
    - var authorEmail = 'jared.schaab@gmail.com';
    - var twitterHandle = 'JaredSchaab';
    - var githubHandle = 'schaab';

    +slide
        h1 Test Your Way to a Better Sleep

        p Unit test your react components
            br
            | and take a step out of the Javascript Wild West


        p by #[a(href=authorLink)= author]
            br
            small
                a(href="https://twitter.com/" + twitterHandle)= '@' + twitterHandle
                |  |&nbsp;
                a(href="mailto:" + authorEmail)= authorEmail

    +slide
        h1 Why Unit Test?

        ul
            li.fragment Documentation for new developers
            li.fragment Baseline functionality for when refactoring
            li.fragment
                a(href="http://evidencebasedse.com/?q=node/78")= "Reduce number of bugs"
            li.fragment Validate bugs are fixed
                span.fragment &hellip;and not broken again later


        aside.notes Shouldn&#8217;t have to really do this one but it almost feels necessary

    +slide
        h1 What Makes a Good Unit Test?

    +slide
        h2 Readable

        pre
            code(data-trim contenteditable).
                describe('add()', () => {
                    it('should add stuffs', () => {
                        expect(add(1, 2)).toEqual(3);
                        expect(add(0, 0)).toEqual(0);
                        expect(add(-1, 2)).toEqual(1);
                        expect(add(-1, -2)).toEqual(-3);
                        expect(add(1, 2, 5)).toEqual(3);

                    });
                });


        aside.notes tests a singular thing and is explicit. If this test fails how do we know what case failed?

    +slide
        h3 Much better&hellip;

        pre
            code(data-trim contenteditable).
                describe('add()', () => {
                    it('should add two positive numbers', () => {
                        expect(add(1, 2)).toEqual(3);
                    });

                    it('should add zeros', () => {
                        expect(add(0, 0)).toEqual(0);
                    });

                    it('should add a negative and a positive value', () => {
                        expect(add(-1, 2)).toEqual(1);
                        expect(add(1, -2)).toEqual(-1);
                    });
                });

    +slide
        h2 Trustworthy

        pre.fragment
            code(data-trim contenteditable).
                describe('add()', () => {
                    it('should add two positive numbers', () => {
                        expect(3).toEqual(3);
                    });
                });

        h2.fragment NOPE!!1

    +slide
        h2 Maintainable

        aside.notes These are all things we want to accomplish when designing our react components

    +slide
        h2 






